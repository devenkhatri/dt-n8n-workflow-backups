{
  "active": false,
  "connections": {
    "the_neuron_trigger": {
      "main": [
        [
          {
            "node": "normalize_neuron",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "futurepedia_trigger": {
      "main": [
        [
          {
            "node": "normalize_futurepedia",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "superhuman_trigger": {
      "main": [
        [
          {
            "node": "normalize_superhuman",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "scrape_url": {
      "main": [
        [
          {
            "node": "filter_scrape_errors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "evaluate_content": {
      "main": [
        [
          {
            "node": "ensure_revelant",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "normalize_neuron": {
      "main": [
        [
          {
            "node": "get_identity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "normalize_futurepedia": {
      "main": [
        [
          {
            "node": "get_identity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "normalize_superhuman": {
      "main": [
        [
          {
            "node": "get_identity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "the_rundown_ai_trigger": {
      "main": [
        [
          {
            "node": "normalize_the_rundown_ai",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "normalize_the_rundown_ai": {
      "main": [
        [
          {
            "node": "get_identity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "taaft_trigger": {
      "main": [
        [
          {
            "node": "normalize_taaft",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "normalize_taaft": {
      "main": [
        [
          {
            "node": "get_identity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "bens_bites_trigger": {
      "main": [
        [
          {
            "node": "normalize_bens_bites",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "normalize_bens_bites": {
      "main": [
        [
          {
            "node": "get_identity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "upload_temp_markdown": {
      "main": [
        [
          {
            "node": "copy_markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "upload_temp_html": {
      "main": [
        [
          {
            "node": "copy_html",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "copy_html": {
      "main": [
        [
          {
            "node": "delete_temp_html",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "copy_markdown": {
      "main": [
        [
          {
            "node": "delete_temp_markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "google_news_trigger": {
      "main": [
        [
          {
            "node": "fetch_google_news_feed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "fetch_google_news_feed": {
      "main": [
        [
          {
            "node": "split_google_news_items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_identity": {
      "main": [
        [
          {
            "node": "search_existing_resource",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "normalize_google_news_articles": {
      "main": [
        [
          {
            "node": "get_identity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "search_existing_resource": {
      "main": [
        [
          {
            "node": "skip_existing_resources",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "skip_existing_resources": {
      "main": [
        [
          {
            "node": "delay",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "hacker_news_trigger": {
      "main": [
        [
          {
            "node": "fetch_hacker_news_feed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "split_google_news_items": {
      "main": [
        [
          {
            "node": "normalize_google_news_articles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "fetch_hacker_news_feed": {
      "main": [
        [
          {
            "node": "split_hacker_news_items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ensure_revelant": {
      "main": [
        [
          {
            "node": "try_extract_external_sources",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "is_revelant_content_parser": {
      "ai_outputParser": [
        [
          {
            "node": "evaluate_content",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "split_hacker_news_items": {
      "main": [
        [
          {
            "node": "normalize_hacker_news_articles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "normalize_hacker_news_articles": {
      "main": [
        [
          {
            "node": "get_identity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "try_extract_external_sources": {
      "main": [
        [
          {
            "node": "upload_temp_markdown",
            "type": "main",
            "index": 0
          },
          {
            "node": "upload_temp_html",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "o3-mini": {
      "ai_languageModel": [
        [
          {
            "node": "try_extract_external_sources",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "evaluate_content",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "fetch_reddit_artificial_inteligence_feed": {
      "main": [
        [
          {
            "node": "split_reddit_artificial_inteligence_items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "split_reddit_artificial_inteligence_items": {
      "main": [
        [
          {
            "node": "get_reddit_artificial_inteligence_items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_reddit_artificial_inteligence_items": {
      "main": [
        [
          {
            "node": "filter_reddit_artificial_inteligence_items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "filter_reddit_artificial_inteligence_items": {
      "main": [
        [
          {
            "node": "normalize_reddit_artificial_inteligence_items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "filter_scrape_errors": {
      "main": [
        [
          {
            "node": "evaluate_content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "normalize_reddit_artificial_inteligence_items": {
      "main": [
        [
          {
            "node": "get_identity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "reddit_artificial_inteligence_trigger": {
      "main": [
        [
          {
            "node": "fetch_reddit_artificial_inteligence_feed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "reddit_open_ai_trigger": {
      "main": [
        [
          {
            "node": "fetch_reddit_open_ai_feed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "fetch_reddit_open_ai_feed": {
      "main": [
        [
          {
            "node": "split_reddit_open_ai_items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "split_reddit_open_ai_items": {
      "main": [
        [
          {
            "node": "get_reddit_open_ai_items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_reddit_open_ai_items": {
      "main": [
        [
          {
            "node": "filter_reddit_open_ai_items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "filter_reddit_open_ai_items": {
      "main": [
        [
          {
            "node": "normalize_reddit_open_ai_items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "normalize_reddit_open_ai_items": {
      "main": [
        [
          {
            "node": "get_identity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "reddit_artificial_trigger": {
      "main": [
        [
          {
            "node": "fetch_reddit_artificial_feed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "fetch_reddit_artificial_feed": {
      "main": [
        [
          {
            "node": "split_reddit_artificial_items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "split_reddit_artificial_items": {
      "main": [
        [
          {
            "node": "get_reddit_artificial_items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_reddit_artificial_items": {
      "main": [
        [
          {
            "node": "filter_reddit_artificial_items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "filter_reddit_artificial_items": {
      "main": [
        [
          {
            "node": "normalize_reddit_artificial_items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "normalize_reddit_artificial_items": {
      "main": [
        [
          {
            "node": "get_identity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "blog_meta_ai_trigger": {
      "main": [
        [
          {
            "node": "fetch_blog_meta_ai_feed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "fetch_blog_meta_ai_feed": {
      "main": [
        [
          {
            "node": "split_blog_meta_ai_items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "split_blog_meta_ai_items": {
      "main": [
        [
          {
            "node": "normalize_blog_meta_ai_articles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "normalize_blog_meta_ai_articles": {
      "main": [
        [
          {
            "node": "get_identity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "blog_cloudflare_ai_trigger": {
      "main": [
        [
          {
            "node": "fetch_blog_cloudflare_ai_feed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "split_blog_cloudflare_ai_items": {
      "main": [
        [
          {
            "node": "normalize_blog_cloudflare_ai_articles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "normalize_blog_cloudflare_ai_articles": {
      "main": [
        [
          {
            "node": "get_identity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "blog_anthropic_ai_trigger": {
      "main": [
        [
          {
            "node": "fetch_blog_anthropic_ai_feed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "fetch_blog_cloudflare_ai_feed": {
      "main": [
        [
          {
            "node": "split_blog_cloudflare_ai_items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "fetch_blog_anthropic_ai_feed": {
      "main": [
        [
          {
            "node": "split_blog_anthropic_ai_items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "split_blog_anthropic_ai_items": {
      "main": [
        [
          {
            "node": "normalize_blog_anthropic_ai_articles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "normalize_blog_anthropic_ai_articles": {
      "main": [
        [
          {
            "node": "get_identity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "blog_google_ai_trigger": {
      "main": [
        [
          {
            "node": "fetch_blog_google_ai_feed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "fetch_blog_google_ai_feed": {
      "main": [
        [
          {
            "node": "split_blog_google_ai_items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "split_blog_google_ai_items": {
      "main": [
        [
          {
            "node": "normalize_blog_google_ai_articles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "normalize_blog_google_ai_articles": {
      "main": [
        [
          {
            "node": "get_identity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "blog_open_ai_trigger": {
      "main": [
        [
          {
            "node": "fetch_blog_open_ai_feed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "fetch_blog_open_ai_feed": {
      "main": [
        [
          {
            "node": "split_blog_open_ai_items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "split_blog_open_ai_items": {
      "main": [
        [
          {
            "node": "normalize_blog_open_ai_articles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "normalize_blog_open_ai_articles": {
      "main": [
        [
          {
            "node": "get_identity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "blog_nvidia_ai_trigger": {
      "main": [
        [
          {
            "node": "fetch_blog_nvidia_ai_feed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "fetch_blog_nvidia_ai_feed": {
      "main": [
        [
          {
            "node": "split_blog_nvidia_ai_items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "split_blog_nvidia_ai_items": {
      "main": [
        [
          {
            "node": "normalize_blog_nvidia_ai_articles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "normalize_blog_nvidia_ai_articles": {
      "main": [
        [
          {
            "node": "get_identity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "delay": {
      "main": [
        [
          {
            "node": "scrape_url",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-30T19:21:17.826Z",
  "id": "vmedoEvLT7S6MRL9",
  "isArchived": false,
  "meta": null,
  "name": "AI News Data Ingestion",
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyX",
              "value": 4
            }
          ]
        },
        "feedUrl": "https://rss.app/feeds/e2QjBpEDLPfVUeoI.xml"
      },
      "type": "n8n-nodes-base.rssFeedReadTrigger",
      "typeVersion": 1,
      "position": [
        64,
        3120
      ],
      "id": "8a5eca02-f01d-452a-b697-b593e2a779b3",
      "name": "the_neuron_trigger"
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyX",
              "value": 4
            }
          ]
        },
        "feedUrl": "https://rss.app/feeds/x8T02B3GXYy18pNy.xml"
      },
      "type": "n8n-nodes-base.rssFeedReadTrigger",
      "typeVersion": 1,
      "position": [
        64,
        3344
      ],
      "id": "1923ab1c-b3c4-429a-ae51-d8e11006ccac",
      "name": "futurepedia_trigger"
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyX",
              "value": 4
            }
          ]
        },
        "feedUrl": "https://rss.app/feeds/3tDyvQwHp8cgL7qs.xml"
      },
      "type": "n8n-nodes-base.rssFeedReadTrigger",
      "typeVersion": 1,
      "position": [
        64,
        3568
      ],
      "id": "b639c946-aac4-4c05-b736-bcfda7a3f889",
      "name": "superhuman_trigger"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "qVEM2rCD1jlJPeRs",
          "mode": "list",
          "cachedResultName": "Data Ingestion — Node - Scrape Url"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "url": "={{ $node[\"get_identity\"].json.url }}"
          },
          "matchingColumns": [
            "url"
          ],
          "schema": [
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        2944,
        1728
      ],
      "id": "d94cd6c4-7f2d-4c7b-a813-239a15fa6c69",
      "name": "scrape_url",
      "retryOnFail": true,
      "waitBetweenTries": 5000
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Given content fetched from a web page, analyze this content to determine if it is a full piece of content that would be considered relevent to our AI Newsletter which features stories, advancements, and other interesting happenings in the tech and AI space.\n\n- Job postings are not relevant content\n- Content centered around unrelated industries is not relevant\n- Only AI and AI Adjacent content should be considered relevant\n\n---\n{{ $json.data.json.content }}",
        "hasOutputParser": true
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        3472,
        1728
      ],
      "id": "665157fe-7a8b-451a-8cc8-5fcc2827dc4f",
      "name": "evaluate_content"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3261021f-54d8-4cce-a78a-12e40520d2c1",
              "name": "sourceName",
              "value": "the-neuron",
              "type": "string"
            },
            {
              "id": "a7a3c290-4b8c-46e5-a9e2-d7c9c03d3bee",
              "name": "feedType",
              "value": "newsletter",
              "type": "string"
            },
            {
              "id": "efb8285b-9def-4cef-883f-af6fbdafa0c7",
              "name": "feedUrl",
              "value": "https://www.theneurondaily.com/archive",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1184,
        3120
      ],
      "id": "4fbce665-8e5d-4cb6-8c83-4eb5ea71e236",
      "name": "normalize_neuron"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3261021f-54d8-4cce-a78a-12e40520d2c1",
              "name": "sourceName",
              "value": "futurepedia",
              "type": "string"
            },
            {
              "id": "a7a3c290-4b8c-46e5-a9e2-d7c9c03d3bee",
              "name": "feedType",
              "value": "newsletter",
              "type": "string"
            },
            {
              "id": "efb8285b-9def-4cef-883f-af6fbdafa0c7",
              "name": "feedUrl",
              "value": "https://futurepedia.beehiiv.com/archive",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1184,
        3344
      ],
      "id": "bdc07f83-ac23-4493-a54d-fc7912f2f244",
      "name": "normalize_futurepedia"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3261021f-54d8-4cce-a78a-12e40520d2c1",
              "name": "sourceName",
              "value": "superhuman",
              "type": "string"
            },
            {
              "id": "a7a3c290-4b8c-46e5-a9e2-d7c9c03d3bee",
              "name": "feedType",
              "value": "newsletter",
              "type": "string"
            },
            {
              "id": "efb8285b-9def-4cef-883f-af6fbdafa0c7",
              "name": "feedUrl",
              "value": "https://www.superhuman.ai/archive",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1184,
        3568
      ],
      "id": "b8b78417-740a-47a7-8660-4d519896394d",
      "name": "normalize_superhuman"
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyX",
              "value": 4
            }
          ]
        },
        "feedUrl": "https://rss.app/feeds/Kc554BCmk9PUValj.xml"
      },
      "type": "n8n-nodes-base.rssFeedReadTrigger",
      "typeVersion": 1,
      "position": [
        64,
        2912
      ],
      "id": "2dec325c-c738-4606-b146-c54f84f2c109",
      "name": "the_rundown_ai_trigger"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3261021f-54d8-4cce-a78a-12e40520d2c1",
              "name": "sourceName",
              "value": "the-rundown-ai",
              "type": "string"
            },
            {
              "id": "a7a3c290-4b8c-46e5-a9e2-d7c9c03d3bee",
              "name": "feedType",
              "value": "newsletter",
              "type": "string"
            },
            {
              "id": "efb8285b-9def-4cef-883f-af6fbdafa0c7",
              "name": "feedUrl",
              "value": "https://www.therundown.ai/archive",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1184,
        2912
      ],
      "id": "ea278618-8c28-41cd-9bb4-c90689812776",
      "name": "normalize_the_rundown_ai"
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyX",
              "value": 4
            }
          ]
        },
        "feedUrl": "https://rss.beehiiv.com/feeds/22I6c0vJXV.xml"
      },
      "type": "n8n-nodes-base.rssFeedReadTrigger",
      "typeVersion": 1,
      "position": [
        64,
        3792
      ],
      "id": "3bba26c3-4cb3-465d-b78a-2ba972e2835c",
      "name": "taaft_trigger"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3261021f-54d8-4cce-a78a-12e40520d2c1",
              "name": "sourceName",
              "value": "taaft",
              "type": "string"
            },
            {
              "id": "a7a3c290-4b8c-46e5-a9e2-d7c9c03d3bee",
              "name": "feedType",
              "value": "newsletter",
              "type": "string"
            },
            {
              "id": "efb8285b-9def-4cef-883f-af6fbdafa0c7",
              "name": "feedUrl",
              "value": "https://newsletter.theresanaiforthat.com/archive",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1184,
        3792
      ],
      "id": "21f66a80-de24-4c1a-a8db-60dc7fec1c5c",
      "name": "normalize_taaft"
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyX",
              "value": 4
            }
          ]
        },
        "feedUrl": "https://rss.app/feeds/O60XfEFYoxJhYVkS.xml"
      },
      "type": "n8n-nodes-base.rssFeedReadTrigger",
      "typeVersion": 1,
      "position": [
        64,
        2688
      ],
      "id": "313e712c-d1da-4afc-844b-e3972943c322",
      "name": "bens_bites_trigger"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3261021f-54d8-4cce-a78a-12e40520d2c1",
              "name": "sourceName",
              "value": "bens-bites",
              "type": "string"
            },
            {
              "id": "a7a3c290-4b8c-46e5-a9e2-d7c9c03d3bee",
              "name": "feedType",
              "value": "newsletter",
              "type": "string"
            },
            {
              "id": "efb8285b-9def-4cef-883f-af6fbdafa0c7",
              "name": "feedUrl",
              "value": "https://bensbites.beehiiv.com/archive",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1184,
        2688
      ],
      "id": "8186d0a7-21c0-44c3-a30a-903669066d76",
      "name": "normalize_bens_bites"
    },
    {
      "parameters": {
        "operation": "upload",
        "bucketName": "data-ingestion",
        "fileName": "={{ $('get_identity').item.json.uploadFileName + \".md.temp\" }}",
        "binaryData": false,
        "fileContent": "={{ $('scrape_url').item.json.data.json.content }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.s3",
      "typeVersion": 1,
      "position": [
        4704,
        1568
      ],
      "id": "9e1b921a-f3fb-43c7-9074-8234577a8779",
      "name": "upload_temp_markdown",
      "retryOnFail": true,
      "maxTries": 5,
      "waitBetweenTries": 5000
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.aitools.inc/admin/files/copy/data-ingestion",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"srcKey\": \"{{ $('get_identity').item.json.uploadFileName + '.md.temp' }}\",\n  \"dstKey\": \"{{ $('get_identity').item.json.uploadFileName + '.md' }}\",\n  \"newContentType\": \"application/vnd.aitools.{{ $('get_identity').item.json.feedType }}+md\",\n  \"newMetadata\": {\n    \"key\": \"{{ $('get_identity').item.json.uploadFileName + '.md' }}\",\n    \"type\": \"{{ $('get_identity').item.json.feedType }}\",\n    \"title\": {{ JSON.stringify($('get_identity').item.json.title) }},\n    \"authors\": {{ JSON.stringify($('get_identity').item.json.authors ?? \"\") }},\n    \"source-name\": \"{{ $('get_identity').item.json.sourceName }}\",\n    \"external-source-urls\": {{ JSON.stringify($('try_extract_external_sources').item.json.output.external_source_urls ?? \"\") }},\n    \"image-urls\": {{ JSON.stringify($('scrape_url').item.json.data.json.main_content_image_urls.join(\",\")) }},\n    \"url\": \"{{ $('get_identity').item.json.url }}\",\n    \"timestamp\": \"{{ $('get_identity').item.json.publishedTimestamp }}\",\n    \"feed-url\": \"{{ $('get_identity').item.json.feedUrl }}\"\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4928,
        1568
      ],
      "id": "9bad6fff-d317-4497-bb21-2fceb696e602",
      "name": "copy_markdown",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "maxTries": 5
    },
    {
      "parameters": {
        "operation": "upload",
        "bucketName": "data-ingestion",
        "fileName": "={{ $('get_identity').item.json.uploadFileName + \".html.temp\" }}",
        "binaryData": false,
        "fileContent": "={{ $('scrape_url').item.json.data.rawHtml }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.s3",
      "typeVersion": 1,
      "position": [
        4704,
        1888
      ],
      "id": "0f223d2e-9eb8-4d0e-9ff0-15352bf9f3bd",
      "name": "upload_temp_html",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "maxTries": 5
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.aitools.inc/admin/files/copy/data-ingestion",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"srcKey\": \"{{ $('get_identity').item.json.uploadFileName + '.html.temp' }}\",\n  \"dstKey\": \"{{ $('get_identity').item.json.uploadFileName + '.html' }}\",\n  \"newContentType\": \"application/vnd.aitools.{{ $('get_identity').item.json.feedType }}.raw+html\",\n  \"newMetadata\": {\n    \"key\": \"{{ $('get_identity').item.json.uploadFileName + '.md' }}\",\n    \"type\": \"{{ $('get_identity').item.json.feedType }}\",\n    \"title\": {{ JSON.stringify($('get_identity').item.json.title) }},\n    \"authors\": {{ JSON.stringify($('get_identity').item.json.authors ?? \"\") }},\n    \"source-name\": \"{{ $('get_identity').item.json.sourceName }}\",\n    \"external-source-urls\": {{ JSON.stringify($('try_extract_external_sources').item.json.output.external_source_urls ?? \"\") }},\n    \"image-urls\": {{ JSON.stringify($('scrape_url').item.json.data.json.main_content_image_urls.join(\",\")) }},\n    \"url\": \"{{ $('get_identity').item.json.url }}\",\n    \"timestamp\": \"{{ $('get_identity').item.json.publishedTimestamp }}\",\n    \"feed-url\": \"{{ $('get_identity').item.json.feedUrl }}\"\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4928,
        1888
      ],
      "id": "2d5102ba-c0f3-4b96-a0f0-ea062da726a1",
      "name": "copy_html",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "maxTries": 5
    },
    {
      "parameters": {
        "operation": "delete",
        "bucketName": "data-ingestion",
        "fileKey": "={{ $('get_identity').item.json.uploadFileName + '.html.temp' }}",
        "options": {}
      },
      "type": "n8n-nodes-base.s3",
      "typeVersion": 1,
      "position": [
        5152,
        1888
      ],
      "id": "3f9c8bfe-4b5f-4bf2-b89d-de21e5023832",
      "name": "delete_temp_html",
      "retryOnFail": true,
      "maxTries": 5,
      "waitBetweenTries": 5000
    },
    {
      "parameters": {
        "operation": "delete",
        "bucketName": "data-ingestion",
        "fileKey": "={{ $('get_identity').item.json.uploadFileName + '.md.temp' }}",
        "options": {}
      },
      "type": "n8n-nodes-base.s3",
      "typeVersion": 1,
      "position": [
        5152,
        1568
      ],
      "id": "a76bedf2-caf4-4d71-96b3-0c48d54fd8b4",
      "name": "delete_temp_markdown",
      "retryOnFail": true,
      "maxTries": 5,
      "waitBetweenTries": 5000
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 3
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        64,
        2464
      ],
      "id": "390bcb6f-ff0e-43cf-8d64-2926fac812d3",
      "name": "google_news_trigger"
    },
    {
      "parameters": {
        "url": "https://rss.app/feeds/v1.1/AkOariu1C7YyUUMv.json",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        288,
        2464
      ],
      "id": "dc1e384c-0cdf-4b1b-aa36-1aad26b7c1f8",
      "name": "fetch_google_news_feed"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const domainSourceMap = {\n  \"engadget.com\": \"engadget\",\n  \"gizmodo.com\": \"gizmodo\",\n  \"techcrunch.com\": \"techcrunch\",\n  \"theverge.com\": \"the-verge\",\n  \"cnbc.com\": \"cnbc\",\n  \"forbes.com\": \"forbes\",\n  \"tradingview.com\": \"trading-view\",\n  \"economist.com\": \"economist\",\n  \"tomshardware.com\": \"toms-hardware\",\n  \"timesofindia.indiatimes.com\": \"times-of-india\",\n  \"seekingalpha.com\": \"seeking-alpha\",\n  \"fool.com\": \"the-motley-fool\",\n  \"sherwood.news\": \"sherwood-news\",\n  \"theregister.com\": \"the-register\",\n  \"yahoo.com\": \"yahoo\",\n  \"finance.yahoo.com\": \"yahoo-finance\",\n  \"venturebeat.com\": \"venture-beat\",\n  \"gurufocus.com\": \"guru-focus\",\n  \"yourstory.com\": \"your-story\",\n  \"theguardian.com\": \"the-guardian\",\n  \"spectrum.ieee.org\": \"spectrum-ieee\",\n  \"nasdaq.com\": \"nasdaq\",\n  \"euractiv.com\": \"euractiv\",\n  \"fortune.com\": \"fortune\",\n  \"indexbox.io\": \"indexbox\",\n  \"phys.org\": \"phys\",\n  \"reuters.com\": \"reuters\",\n  \"bloomberg.com\": \"bloomberg\",\n  \"ign.com\": \"ign\",\n  \"japantimes.co.jp\": \"japan-times\",\n  \"thehindu.com\": \"the-hindu\",\n  \"ft.com\": \"financial-times\",\n  \"nytimes.com\": \"the-new-york-times\",\n  \"aftermath.site\": \"aftermath\",\n  \"computerworld.com\": \"computer-world\",\n  \"business.inquirer.net\": \"business-inquirer\",\n  \"androidpolice.com\": \"android-police\",\n  \"scmp.com\": \"scmp\",\n  \"azure.microsoft.com\": \"microsoft-azure\",\n  \"benzinga.com\": \"benzinga\"\n}\n\n// Use a regex to extract the hostname.\n// The regex breakdown:\n// ^(?:https?:\\/\\/)?  --> Optionally match the protocol (http:// or https://)\n// (?:www\\.)?         --> Optionally match \"www.\"\n// ([^\\/]+)           --> Capture all characters until the first \"/\" (the hostname)\nconst match = $input.item.json.url.match(/^(?:https?:\\/\\/)?(?:www\\.)?([^\\/]+)/i);\n\nif (!match) {\n  throw new Error(\"Unable to regex match url\")\n}\n\nconst domain = match[1];\nlet sourceName = domainSourceMap[domain];\n\nif (!sourceName) {\n  // Fallback: generate a friendly name by removing any leading \"www.\", \n  // then removing the TLD (the last dot segment),\n  // and finally replacing any remaining dots with dashes.\n  sourceName = domain\n    .replace(/^www\\./, '')\n    .replace(/\\.[^.]+$/, '') // removes the TLD\n    .replace(/\\./g, '-');\n}\n\nif (!sourceName) {\n    throw new Error(`Unknown source detected: ${domain}`);\n}\n\nreturn {\n  sourceName: sourceName,\n  title: $input.item.json.title,\n  creator: $input.item.json.authors[0]?.name,\n  link: $input.item.json.url,\n  pubDate: $input.item.json.date_published,\n  isoDate: $input.item.json.date_published,\n  feedType: \"article\",\n  feedUrl: \"https://rss.app/feeds/v1.1/AkOariu1C7YyUUMv.json\"\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1184,
        2464
      ],
      "id": "28351418-c8da-4a3f-800f-23083820379c",
      "name": "normalize_google_news_articles"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6a082ec0-16b7-4d5b-832d-2609a06fae15",
              "name": "title",
              "value": "={{ $json.title }}",
              "type": "string"
            },
            {
              "id": "6838c8ba-c498-49f5-bb97-bee33f02dd20",
              "name": "url",
              "value": "={{ $json.link }}",
              "type": "string"
            },
            {
              "id": "13967cc2-74e2-445f-b88f-f15405cd89d8",
              "name": "authors",
              "value": "={{ $json.creator }}",
              "type": "string"
            },
            {
              "id": "a33938bc-1743-4e67-bdaf-c4c1d5bc3ce0",
              "name": "date",
              "value": "={{ $json.pubDate }}",
              "type": "string"
            },
            {
              "id": "7edee0aa-3a35-41bf-b616-85246fed3436",
              "name": "publishedTimestamp",
              "value": "={{ $json.isoDate }}",
              "type": "string"
            },
            {
              "id": "a68bb301-94e1-414d-96f8-09f6453b45c1",
              "name": "sourceName",
              "value": "={{ $json.sourceName }}",
              "type": "string"
            },
            {
              "id": "00b19e33-754f-4347-a30a-bb33b3740919",
              "name": "feedType",
              "value": "={{ $json.feedType }}",
              "type": "string"
            },
            {
              "id": "24e1b6dc-81e2-4964-a56c-36ceccd9e1f2",
              "name": "feedUrl",
              "value": "={{ $json.feedUrl }}",
              "type": "string"
            },
            {
              "id": "b287462d-3fad-46a2-bc42-5aa98aa8bde3",
              "name": "uploadFileName",
              "value": "={{ \n  $json.isoDate.substring(0, 10) + \"/\" + \n  $json.title\n    .toLowerCase()\n    .replace(/[^a-z0-9 -]/g, '')  // remove characters outside a-z, 0-9, space, and dash\n    .trim()                      // remove any leading/trailing whitespace\n    .replace(/\\s+/g, '-')        // replace whitespace with dash\n    .replace(/-+/g, '-')         // collapse multiple dashes\n  + '.' + $json.sourceName \n}}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1760,
        1728
      ],
      "id": "7a2253e3-01c8-46c7-9062-522410cbeb87",
      "name": "get_identity",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "resource": "bucket",
        "operation": "search",
        "bucketName": "data-ingestion",
        "additionalFields": {
          "prefix": "={{ $json.uploadFileName }}"
        }
      },
      "type": "n8n-nodes-base.s3",
      "typeVersion": 1,
      "position": [
        2112,
        1728
      ],
      "id": "21e83481-c4ce-4f67-87b0-d7b05030c4fb",
      "name": "search_existing_resource",
      "retryOnFail": true,
      "waitBetweenTries": 5000
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "fbf2844d-f77e-4c7f-a223-42b674d3668c",
              "leftValue": "={{ $json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        2400,
        1728
      ],
      "id": "4ee1cfd8-6c91-4305-a81d-85ed11041f1a",
      "name": "skip_existing_resources"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 3
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        64,
        2224
      ],
      "id": "80a0d05a-5fc1-4aae-aa1e-78e2eff393a7",
      "name": "hacker_news_trigger"
    },
    {
      "parameters": {
        "url": "https://rss.app/feeds/v1.1/jf3MZ9ZlVZhrVEjD.json",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        288,
        2224
      ],
      "id": "7068d112-9dad-42a2-a13a-51a598c7517a",
      "name": "fetch_hacker_news_feed"
    },
    {
      "parameters": {
        "fieldToSplitOut": "items",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        512,
        2464
      ],
      "id": "51efc7c0-6030-45b5-8b49-1d962aaced44",
      "name": "split_google_news_items"
    },
    {
      "parameters": {
        "fieldToSplitOut": "items",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        512,
        2224
      ],
      "id": "89d23630-a8ae-4b07-bc23-9c3791ddb3aa",
      "name": "split_hacker_news_items"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "22197457-7f84-4504-a14f-a5346a80359f",
              "leftValue": "={{ $('evaluate_content').item.json.output.is_revelant_content }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        3952,
        1728
      ],
      "id": "5d207f78-12a0-4d71-a88c-99fb1afee08d",
      "name": "ensure_revelant"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n\t\"type\": \"object\",\n\t\"properties\": {\n        \"chainOfThought\": {\n          \"type\": \"string\",\n          \"description\": \"Sequential reasoning to determine if the provided content is a valid and relevant piece of content that an AI or tech enthusiast would be interested in reading and learning about.\"\n        },\n\t\t\"is_revelant_content\": {\n\t\t\t\"type\": \"boolean\",\n            \"description\": \"Indicator if the provided content is relevant piece of content to the AI industry.\"\n\t\t}\n\t}\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        3632,
        2112
      ],
      "id": "edb2fdde-6d7a-40be-a0d9-553d1cbaabcc",
      "name": "is_revelant_content_parser"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Use a regex to extract the hostname.\n// The regex breakdown:\n// ^(?:https?:\\/\\/)?  --> Optionally match the protocol (http:// or https://)\n// (?:www\\.)?         --> Optionally match \"www.\"\n// ([^\\/]+)           --> Capture all characters until the first \"/\" (the hostname)\nconst match = $input.item.json.url.match(/^(?:https?:\\/\\/)?(?:www\\.)?([^\\/]+)/i);\n\nif (!match) {\n  throw new Error(\"Unable to regex match url\")\n}\n\nconst domain = match[1];\nconst sourceName = domain\n  .replace(/^www\\./, '')\n  .replace(/\\.[^.]+$/, '') // removes the TLD\n  .replace(/\\./g, '-');\n\nif (!sourceName) {\n    throw new Error(`Unknown source detected: ${domain}`);\n}\n\nreturn {\n  sourceName: sourceName,\n  title: $input.item.json.title,\n  creator: $input.item.json.authors[0]?.name,\n  link: $input.item.json.url,\n  pubDate: $input.item.json.date_published,\n  isoDate: $input.item.json.date_published,\n  feedType: \"article\",\n  feedUrl: \"https://rss.app/feeds/v1.1/AkOariu1C7YyUUMv.json\"\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1184,
        2224
      ],
      "id": "dbecc138-2366-480f-b62a-d335e940d3f0",
      "name": "normalize_hacker_news_articles"
    },
    {
      "parameters": {
        "text": "=You are given:\n\n1. **Content Website**: The domain hosting the content (e.g., `https://www.bloomberg.com/news/…`).  \n2. **Content Title and Body**: Text or markdown content extracted from a web page.  \n3. **Links Found on Content Page**: A list of hyperlinks that appear in or around the same article or page.\n\n## Your Task\n\n- Identify any **external source links** that are most relevant to the main topic of the content. It is possible there are NOT ANY good external source links.\n- **External** means the link must be on a domain *different* from the Content Website’s domain.\n- **Relevance** means it must directly reference a primary source (e.g., a product announcement, study, press release, etc.) that underpins the main topic.\n- **Exclude** links that are:\n  - On the same domain as the Content Website\n  - Generic homepages, profile pages, or unrelated side links\n  - Not clearly connected to the main focus of the article\n  - To storefront pages like eCommerce sites, to bookstore pages, to direct product listings, or other place to order a product directly.\n  - To shopping websites like bookstores and other retail stores.\n- If one or more valid external links exist, return them in a single comma-separated string as `external_source_urls`.\n- If no external links meet these criteria, omit the `external_source_urls` field entirely.\n\n## Output Format\n\n- Return only the answer in plain text.\n- Either:\n  1. `external_source_urls: <comma-separated list of valid external links>`\n  2. Omit the field if no valid external links exist.\n\n\n## Other Details\nIt is critical that your source link is relevant to the main content and would be useful context to evaluate when writing a newsletter overview about this content targeted towards AI enthusiasts and people interested in the AI space.\n\n---\n\n### Example Scenario\n\nIf the article is focused on an AI breakthrough from OpenAI and there is an external link to an official OpenAI product announcement hosted on openai.com, include that link (since it is on a *different* domain and relevant to the main topic). If all links point to the same domain or are irrelevant, do not return any `external_source_urls`.\n\n---\nContent Website:\n{{ $('scrape_url').item.json.data.metadata.url }}\n\n\nContent Title:\n{{ $('scrape_url').item.json.data.metadata.title }}\n\nContent:\n{{ $('scrape_url').item.json.data.json.content }}\n\nLinks Found on Content Page:\n{{ $('scrape_url').item.json.data.links.map(item => item.split(\"?\")[0]).join(\"\\n\") }}\n",
        "attributes": {
          "attributes": [
            {
              "name": "external_source_urls",
              "description": "Optional comma-separated values list of urls that are external sources referenced on this piece of content. The url here should NOT be on the same domain as the url of the main content piece, it should be an external url meaning another website. Make sure there is NOT a trailing comma after the last value."
            }
          ]
        },
        "options": {
          "systemPromptTemplate": "You are an expert extraction algorithm.\nOnly extract relevant information from the text.\nIf you do not know the value of an attribute asked to extract, you may omit the attribute's value."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "typeVersion": 1,
      "position": [
        4240,
        1728
      ],
      "id": "254cecd1-db11-4996-9a4d-fdb12926833c",
      "name": "try_extract_external_sources",
      "retryOnFail": true,
      "waitBetweenTries": 5000
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "o3-mini",
          "mode": "list",
          "cachedResultName": "o3-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        3872,
        2112
      ],
      "id": "fb4d924f-f935-428b-9f0a-2c8a61f9881d",
      "name": "o3-mini"
    },
    {
      "parameters": {
        "url": "https://rss.app/feeds/v1.1/F3rBf24jLxG6mNoJ.json",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        288,
        1984
      ],
      "id": "7046b4e6-bf96-4fc9-ade3-54798960ad4f",
      "name": "fetch_reddit_artificial_inteligence_feed"
    },
    {
      "parameters": {
        "fieldToSplitOut": "items",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        512,
        1984
      ],
      "id": "fdf319a6-13cc-43ef-aac2-8475b6d8777f",
      "name": "split_reddit_artificial_inteligence_items"
    },
    {
      "parameters": {
        "operation": "get",
        "subreddit": "ArtificialInteligence",
        "postId": "={{ $json.url.match(/comments\\/([^/]+)/)[1] }}"
      },
      "type": "n8n-nodes-base.reddit",
      "typeVersion": 1,
      "position": [
        720,
        1984
      ],
      "id": "3804ba09-c107-4085-a72c-b96546c8623d",
      "name": "get_reddit_artificial_inteligence_items",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "701be722-6eb4-48f5-bc12-ed858a58bce1",
              "leftValue": "={{ $json.error }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            },
            {
              "id": "7e9f6852-ccf6-488e-8019-899aaa1ef6ff",
              "leftValue": "={{ $json.url_overridden_by_dest }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "79bc5622-4063-48a8-835b-8b45746a7f2e",
              "leftValue": "={{ $json.url_overridden_by_dest }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "1a4ca682-edac-47b1-8e84-dbaa3f79a819",
              "leftValue": "={{ $json.url_overridden_by_dest }}",
              "rightValue": "reddit.com",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "f29b29c7-d183-450a-b9e6-b02635a2dead",
              "leftValue": "={{ $json.url_overridden_by_dest }}",
              "rightValue": "youtube.com",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "ab07ea23-fe91-4669-8417-396fe65765bf",
              "leftValue": "={{ $json.url_overridden_by_dest }}",
              "rightValue": "youtu.be",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "eb92ce45-bdb8-4e8e-bf6b-d3d27a3d9108",
              "leftValue": "={{ $json.url_overridden_by_dest }}",
              "rightValue": "x.com",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "6f51a62d-08ca-4ef4-abf1-cb29f8b3734e",
              "leftValue": "={{ $json.url_overridden_by_dest }}",
              "rightValue": "github.com",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "5ae77967-31a2-4f52-85c8-ee4b06c86fbf",
              "leftValue": "={{ $json.url_overridden_by_dest }}",
              "rightValue": "i.redd.it",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "264842c1-8d69-4d4e-8c0b-0982cc9db627",
              "leftValue": "={{ $json.url_overridden_by_dest }}",
              "rightValue": "=v.redd.it",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        944,
        1984
      ],
      "id": "5258b3bf-38fb-486d-bd8f-c6e05bf8e33d",
      "name": "filter_reddit_artificial_inteligence_items"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ecd02ccb-0790-44ab-8bb0-246881e35a20",
              "leftValue": "={{ $json.error }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        3232,
        1728
      ],
      "id": "151b6379-f175-4857-bcd1-2e36a1bc9720",
      "name": "filter_scrape_errors"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Use a regex to extract the hostname.\n// The regex breakdown:\n// ^(?:https?:\\/\\/)?  --> Optionally match the protocol (http:// or https://)\n// (?:www\\.)?         --> Optionally match \"www.\"\n// ([^\\/]+)           --> Capture all characters until the first \"/\" (the hostname)\nconst match = $input.item.json.url.match(/^(?:https?:\\/\\/)?(?:www\\.)?([^\\/]+)/i);\n\nif (!match) {\n  throw new Error(\"Unable to regex match url\")\n}\n\nconst domain = match[1];\nconst sourceName = domain\n  .replace(/^www\\./, '')\n  .replace(/\\.[^.]+$/, '') // removes the TLD\n  .replace(/\\./g, '-');\n\nif (!sourceName) {\n    throw new Error(`Unknown source detected: ${domain}`);\n}\n\nreturn {\n  sourceName: sourceName,\n  title: $input.item.json.title,\n  link: $input.item.json.url,\n  pubDate: new Date($input.item.json.created_utc * 1000).toISOString(),\n  isoDate: new Date($input.item.json.created_utc * 1000).toISOString(),\n  feedType: \"subreddit\",\n  feedUrl: \"https://rss.app/feeds/v1.1/AkOariu1C7YyUUMv.json\"\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1184,
        1984
      ],
      "id": "f80df7dd-c095-4d97-82b0-1438386fa3dd",
      "name": "normalize_reddit_artificial_inteligence_items"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 3
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        64,
        1984
      ],
      "id": "e02fc761-dde2-4aee-8ea9-41a14f176787",
      "name": "reddit_artificial_inteligence_trigger"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 3
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        64,
        1728
      ],
      "id": "e1e847ae-397b-49ba-a927-782d90ef58ae",
      "name": "reddit_open_ai_trigger"
    },
    {
      "parameters": {
        "url": "https://rss.app/feeds/v1.1/1LDBacY8BC2qJaZh.json",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        288,
        1728
      ],
      "id": "731ce45e-0dde-4141-bb0c-24b62bcb6875",
      "name": "fetch_reddit_open_ai_feed"
    },
    {
      "parameters": {
        "fieldToSplitOut": "items",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        512,
        1728
      ],
      "id": "41d5c601-c201-4640-a3c0-799a30b0d4e6",
      "name": "split_reddit_open_ai_items"
    },
    {
      "parameters": {
        "operation": "get",
        "subreddit": "OpenAI",
        "postId": "={{ $json.url.match(/comments\\/([^/]+)/)[1] }}"
      },
      "type": "n8n-nodes-base.reddit",
      "typeVersion": 1,
      "position": [
        720,
        1728
      ],
      "id": "0605b847-77c9-4d02-9fc6-3c0dfc50e1ab",
      "name": "get_reddit_open_ai_items",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "9743b6e1-a915-4a5c-b133-1e94d68e060d",
              "leftValue": "={{ $json.error }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            },
            {
              "id": "7e9f6852-ccf6-488e-8019-899aaa1ef6ff",
              "leftValue": "={{ $json.url_overridden_by_dest }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "79bc5622-4063-48a8-835b-8b45746a7f2e",
              "leftValue": "={{ $json.url_overridden_by_dest }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "1a4ca682-edac-47b1-8e84-dbaa3f79a819",
              "leftValue": "={{ $json.url_overridden_by_dest }}",
              "rightValue": "reddit.com",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "f29b29c7-d183-450a-b9e6-b02635a2dead",
              "leftValue": "={{ $json.url_overridden_by_dest }}",
              "rightValue": "youtube.com",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "ab07ea23-fe91-4669-8417-396fe65765bf",
              "leftValue": "={{ $json.url_overridden_by_dest }}",
              "rightValue": "youtu.be",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "eb92ce45-bdb8-4e8e-bf6b-d3d27a3d9108",
              "leftValue": "={{ $json.url_overridden_by_dest }}",
              "rightValue": "x.com",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "6f51a62d-08ca-4ef4-abf1-cb29f8b3734e",
              "leftValue": "={{ $json.url_overridden_by_dest }}",
              "rightValue": "github.com",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "3edaa177-9a40-41de-bcc2-fe248a777626",
              "leftValue": "={{ $json.url_overridden_by_dest }}",
              "rightValue": "i.redd.it",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "13ab666b-fcbf-4798-b3f6-f74079b8f6fa",
              "leftValue": "={{ $json.url_overridden_by_dest }}",
              "rightValue": "v.redd.it",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        944,
        1728
      ],
      "id": "2503b182-7802-4e28-974f-d92f76102bd2",
      "name": "filter_reddit_open_ai_items"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Use a regex to extract the hostname.\n// The regex breakdown:\n// ^(?:https?:\\/\\/)?  --> Optionally match the protocol (http:// or https://)\n// (?:www\\.)?         --> Optionally match \"www.\"\n// ([^\\/]+)           --> Capture all characters until the first \"/\" (the hostname)\nconst match = $input.item.json.url.match(/^(?:https?:\\/\\/)?(?:www\\.)?([^\\/]+)/i);\n\nif (!match) {\n  throw new Error(\"Unable to regex match url\")\n}\n\nconst domain = match[1];\nconst sourceName = domain\n  .replace(/^www\\./, '')\n  .replace(/\\.[^.]+$/, '') // removes the TLD\n  .replace(/\\./g, '-');\n\nif (!sourceName) {\n    throw new Error(`Unknown source detected: ${domain}`);\n}\n\nreturn {\n  sourceName: sourceName,\n  title: $input.item.json.title,\n  link: $input.item.json.url,\n  pubDate: new Date($input.item.json.created_utc * 1000).toISOString(),\n  isoDate: new Date($input.item.json.created_utc * 1000).toISOString(),\n  feedType: \"subreddit\",\n  feedUrl: \"https://rss.app/feeds/v1.1/1LDBacY8BC2qJaZh.json\"\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1184,
        1728
      ],
      "id": "fe26c076-fd01-4c5c-be3f-44a334df2e4e",
      "name": "normalize_reddit_open_ai_items"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 3
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        64,
        1472
      ],
      "id": "6526b21b-651a-4bf9-b18d-b8315a912f31",
      "name": "reddit_artificial_trigger"
    },
    {
      "parameters": {
        "url": "https://rss.app/feeds/v1.1/upLgfm9lv7RXwzes.json",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        288,
        1472
      ],
      "id": "eec1240a-3363-4fa5-b61a-6394dd70e11d",
      "name": "fetch_reddit_artificial_feed"
    },
    {
      "parameters": {
        "fieldToSplitOut": "items",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        512,
        1472
      ],
      "id": "6202abc2-3d9d-49c2-802a-c97c84014876",
      "name": "split_reddit_artificial_items"
    },
    {
      "parameters": {
        "operation": "get",
        "subreddit": "artificial",
        "postId": "={{ $json.url.match(/comments\\/([^/]+)/)[1] }}"
      },
      "type": "n8n-nodes-base.reddit",
      "typeVersion": 1,
      "position": [
        720,
        1472
      ],
      "id": "a9ad3f81-211e-4cb5-a33a-996d515ef1a1",
      "name": "get_reddit_artificial_items",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0c525d94-7ad5-49ef-b5cd-f149992e85cd",
              "leftValue": "={{ $json.error }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            },
            {
              "id": "7e9f6852-ccf6-488e-8019-899aaa1ef6ff",
              "leftValue": "={{ $json.url_overridden_by_dest }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "79bc5622-4063-48a8-835b-8b45746a7f2e",
              "leftValue": "={{ $json.url_overridden_by_dest }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "1a4ca682-edac-47b1-8e84-dbaa3f79a819",
              "leftValue": "={{ $json.url_overridden_by_dest }}",
              "rightValue": "reddit.com",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "f29b29c7-d183-450a-b9e6-b02635a2dead",
              "leftValue": "={{ $json.url_overridden_by_dest }}",
              "rightValue": "youtube.com",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "ab07ea23-fe91-4669-8417-396fe65765bf",
              "leftValue": "={{ $json.url_overridden_by_dest }}",
              "rightValue": "youtu.be",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "eb92ce45-bdb8-4e8e-bf6b-d3d27a3d9108",
              "leftValue": "={{ $json.url_overridden_by_dest }}",
              "rightValue": "x.com",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "6f51a62d-08ca-4ef4-abf1-cb29f8b3734e",
              "leftValue": "={{ $json.url_overridden_by_dest }}",
              "rightValue": "github.com",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "3edaa177-9a40-41de-bcc2-fe248a777626",
              "leftValue": "={{ $json.url_overridden_by_dest }}",
              "rightValue": "i.redd.it",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "13ab666b-fcbf-4798-b3f6-f74079b8f6fa",
              "leftValue": "={{ $json.url_overridden_by_dest }}",
              "rightValue": "v.redd.it",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        944,
        1472
      ],
      "id": "b90c779f-4822-4562-9573-8d013f5b0a19",
      "name": "filter_reddit_artificial_items"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Use a regex to extract the hostname.\n// The regex breakdown:\n// ^(?:https?:\\/\\/)?  --> Optionally match the protocol (http:// or https://)\n// (?:www\\.)?         --> Optionally match \"www.\"\n// ([^\\/]+)           --> Capture all characters until the first \"/\" (the hostname)\nconst match = $input.item.json.url.match(/^(?:https?:\\/\\/)?(?:www\\.)?([^\\/]+)/i);\n\nif (!match) {\n  throw new Error(\"Unable to regex match url\")\n}\n\nconst domain = match[1];\nconst sourceName = domain\n  .replace(/^www\\./, '')\n  .replace(/\\.[^.]+$/, '') // removes the TLD\n  .replace(/\\./g, '-');\n\nif (!sourceName) {\n    throw new Error(`Unknown source detected: ${domain}`);\n}\n\nreturn {\n  sourceName: sourceName,\n  title: $input.item.json.title,\n  link: $input.item.json.url,\n  pubDate: new Date($input.item.json.created_utc * 1000).toISOString(),\n  isoDate: new Date($input.item.json.created_utc * 1000).toISOString(),\n  feedType: \"subreddit\",\n  feedUrl: \"https://rss.app/feeds/v1.1/upLgfm9lv7RXwzes.json\"\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1184,
        1472
      ],
      "id": "2a401ece-b1fb-41f5-af69-830ff713e4ad",
      "name": "normalize_reddit_artificial_items"
    },
    {
      "parameters": {
        "content": "## Web Content",
        "height": 3960,
        "width": 5380,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        0
      ],
      "typeVersion": 1,
      "id": "9cc5fe95-7eca-4fbe-bbea-b53d009eb4f5",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 4
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        64,
        1232
      ],
      "id": "35d3b0c5-715f-4cdb-ada4-ece1c210c152",
      "name": "blog_meta_ai_trigger"
    },
    {
      "parameters": {
        "url": "https://rss.app/feeds/v1.1/zqVI3dZrdbmZjbR8.json",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        288,
        1232
      ],
      "id": "9cf7364f-82c9-418b-8810-45f79baedcd3",
      "name": "fetch_blog_meta_ai_feed"
    },
    {
      "parameters": {
        "fieldToSplitOut": "items",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        512,
        1232
      ],
      "id": "411bdae1-098a-48c8-8a46-161a7084ea0f",
      "name": "split_blog_meta_ai_items"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "return {\n  sourceName: \"blog-meta\",\n  title: $input.item.json.title,\n  creator: $input.item.json.authors[0]?.name,\n  link: $input.item.json.url,\n  pubDate: $input.item.json.date_published,\n  isoDate: $input.item.json.date_published,\n  feedType: \"article\",\n  feedUrl: \"https://rss.app/feeds/v1.1/zqVI3dZrdbmZjbR8.json\"\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1184,
        1232
      ],
      "id": "658b6383-d8d1-4adb-b1b5-4afa636c3c19",
      "name": "normalize_blog_meta_ai_articles"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 4
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        64,
        992
      ],
      "id": "24240bc4-c85a-40bd-88ae-90543d38d60b",
      "name": "blog_cloudflare_ai_trigger"
    },
    {
      "parameters": {
        "fieldToSplitOut": "items",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        512,
        992
      ],
      "id": "47ef3dbb-a04d-496c-bf14-7f85ba38a3e7",
      "name": "split_blog_cloudflare_ai_items"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "return {\n  sourceName: \"blog-cloudflare\",\n  title: $input.item.json.title,\n  creator: $input.item.json.authors[0]?.name,\n  link: $input.item.json.url,\n  pubDate: $input.item.json.date_published,\n  isoDate: $input.item.json.date_published,\n  feedType: \"article\",\n  feedUrl: \"https://rss.app/feeds/v1.1/iLzlJfBHVV0phe2n.json\"\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1184,
        992
      ],
      "id": "f406c61c-5a5d-40b9-b928-d51dd98e0d99",
      "name": "normalize_blog_cloudflare_ai_articles"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 4
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        64,
        768
      ],
      "id": "9c3740e2-c038-4e6b-8910-4dda23a0b107",
      "name": "blog_anthropic_ai_trigger"
    },
    {
      "parameters": {
        "url": "https://rss.app/feeds/v1.1/iLzlJfBHVV0phe2n.json",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        288,
        992
      ],
      "id": "ed65a74f-b4e6-479a-ade8-cd1d5a32a8d7",
      "name": "fetch_blog_cloudflare_ai_feed"
    },
    {
      "parameters": {
        "url": "https://rss.app/feeds/v1.1/OFdSUsziElw0rkpx.json",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        288,
        768
      ],
      "id": "1a556286-f56b-4bf8-9908-bc90d9e79440",
      "name": "fetch_blog_anthropic_ai_feed"
    },
    {
      "parameters": {
        "fieldToSplitOut": "items",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        512,
        768
      ],
      "id": "1a15431c-1282-4bf6-b9e4-a7734afeca4a",
      "name": "split_blog_anthropic_ai_items"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "return {\n  sourceName: \"blog-anthropic\",\n  title: $input.item.json.title,\n  creator: $input.item.json.authors[0]?.name,\n  link: $input.item.json.url,\n  pubDate: $input.item.json.date_published,\n  isoDate: $input.item.json.date_published,\n  feedType: \"article\",\n  feedUrl: \"https://rss.app/feeds/v1.1/OFdSUsziElw0rkpx.json\"\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1184,
        768
      ],
      "id": "367ef54e-2263-4471-a36e-3ce09907a0dd",
      "name": "normalize_blog_anthropic_ai_articles"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 4
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        64,
        544
      ],
      "id": "8185681f-eb00-4677-83ef-b544416d0c93",
      "name": "blog_google_ai_trigger"
    },
    {
      "parameters": {
        "url": "https://rss.app/feeds/v1.1/2CtvCsOtZS35jJgp.json",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        288,
        544
      ],
      "id": "c854fac7-41dc-4f0a-8d69-dfac62c53f66",
      "name": "fetch_blog_google_ai_feed"
    },
    {
      "parameters": {
        "fieldToSplitOut": "items",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        512,
        544
      ],
      "id": "1e23900c-f2f7-48fa-9d1a-f13e159c6367",
      "name": "split_blog_google_ai_items"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "return {\n  sourceName: \"blog-google\",\n  title: $input.item.json.title,\n  creator: $input.item.json.authors[0]?.name,\n  link: $input.item.json.url,\n  pubDate: $input.item.json.date_published,\n  isoDate: $input.item.json.date_published,\n  feedType: \"article\",\n  feedUrl: \"https://rss.app/feeds/v1.1/2CtvCsOtZS35jJgp.json\"\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1184,
        544
      ],
      "id": "e91f7dc3-807b-46e3-b7bd-89895b833edf",
      "name": "normalize_blog_google_ai_articles"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 4
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        64,
        320
      ],
      "id": "d3988394-ade8-41a5-bbf1-13e702415b16",
      "name": "blog_open_ai_trigger"
    },
    {
      "parameters": {
        "url": "https://rss.app/feeds/v1.1/6BnoYYEtnCHXfHj0.json",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        288,
        320
      ],
      "id": "a174eef8-cb48-47fb-ae3a-fd3923cd9f9a",
      "name": "fetch_blog_open_ai_feed"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "return {\n  sourceName: \"blog-open-ai\",\n  title: $input.item.json.title,\n  creator: $input.item.json.authors[0]?.name,\n  link: $input.item.json.url,\n  pubDate: $input.item.json.date_published,\n  isoDate: $input.item.json.date_published,\n  feedType: \"article\",\n  feedUrl: \"https://rss.app/feeds/v1.1/6BnoYYEtnCHXfHj0.json\"\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1184,
        320
      ],
      "id": "3f0a8682-3525-458d-b13e-eeb7b3551cfc",
      "name": "normalize_blog_open_ai_articles"
    },
    {
      "parameters": {
        "fieldToSplitOut": "items",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        512,
        320
      ],
      "id": "d92ee839-8659-469d-88b6-68d6ca9b583e",
      "name": "split_blog_open_ai_items"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 4
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        64,
        112
      ],
      "id": "85f725d3-0932-48a4-b769-9e808f7c7746",
      "name": "blog_nvidia_ai_trigger"
    },
    {
      "parameters": {
        "url": "https://rss.app/feeds/v1.1/rXJrh1u8zDwJLUJK.json",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        288,
        112
      ],
      "id": "949f3f0b-4169-4071-9f21-1d2a91232ed3",
      "name": "fetch_blog_nvidia_ai_feed"
    },
    {
      "parameters": {
        "fieldToSplitOut": "items",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        512,
        112
      ],
      "id": "8746e141-ca44-4554-aff7-56b79ec01880",
      "name": "split_blog_nvidia_ai_items"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "return {\n  sourceName: \"blog-nvidia-ai\",\n  title: $input.item.json.title,\n  creator: $input.item.json.authors[0]?.name,\n  link: $input.item.json.url,\n  pubDate: $input.item.json.date_published,\n  isoDate: $input.item.json.date_published,\n  feedType: \"article\",\n  feedUrl: \"https://rss.app/feeds/v1.1/rXJrh1u8zDwJLUJK.json\"\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1184,
        112
      ],
      "id": "7764fb38-c48b-4c39-b28f-61a7ce1d2aaf",
      "name": "normalize_blog_nvidia_ai_articles"
    },
    {
      "parameters": {
        "amount": 180
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2688,
        1728
      ],
      "id": "f02e2d35-2520-43d8-8b7e-e7988bb375c5",
      "name": "delay",
      "webhookId": "ea003ac0-5583-4e8d-812a-c9dd73c09cf4"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-09-30T19:21:17.858Z",
      "updatedAt": "2025-09-30T19:21:17.858Z",
      "role": "workflow:owner",
      "workflowId": "vmedoEvLT7S6MRL9",
      "projectId": "aWyvbmsnIGDehq9r"
    }
  ],
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-09-30T19:21:14.161Z",
      "updatedAt": "2025-09-30T19:21:14.161Z",
      "id": "K3Q4qbpH8v2umoRS",
      "name": "Entrypoint"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-09-30T19:21:17.000Z",
  "versionId": "0e430e5e-b35e-4cdb-92ab-d6d1af1c9e49"
}