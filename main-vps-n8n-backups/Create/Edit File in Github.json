{
  "active": false,
  "connections": {
    "Merge Items": {
      "main": [
        [
          {
            "node": "isDiffOrNew",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "isDiffOrNew": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit existing file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Edit existing file",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create new file",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get a file": {
      "main": [
        [
          {
            "node": "Is File too large?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is File too large?": {
      "main": [
        [
          {
            "node": "Get File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get File": {
      "main": [
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Get a file",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Items",
            "type": "main",
            "index": 1
          }
        ]
      ]
    }
  },
  "createdAt": "2025-10-03T11:52:33.545Z",
  "id": "uNo2nab5wWq5G2iH",
  "isArchived": false,
  "meta": null,
  "name": "Create/Edit File in Github",
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "Repository Owner"
            },
            {
              "name": "Repository Name"
            },
            {
              "name": "File Path"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -384,
        0
      ],
      "id": "ec05b5ec-a37a-4425-9a47-23ba18a73ca1",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8d513345-6484-431f-afb7-7cf045c90f4f",
              "name": "Done",
              "type": "boolean",
              "value": true
            }
          ]
        },
        "options": {}
      },
      "id": "af14f8f3-67f9-439b-a939-fbc2d97a84fa",
      "name": "Return",
      "type": "n8n-nodes-base.set",
      "position": [
        1344,
        256
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {},
      "id": "6a85fb04-0de9-40c1-905e-cbbcf89c5b26",
      "name": "Merge Items",
      "type": "n8n-nodes-base.merge",
      "position": [
        464,
        64
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Decode base64 content and parse JSON\n  const origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64').toString());\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n// No file returned / new workflow\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = JSON.parse($input.all()[0].json.data);\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();\n"
      },
      "id": "34dcbb7a-ee2b-4ef8-a96c-6c46efc80d3d",
      "name": "isDiffOrNew",
      "type": "n8n-nodes-base.code",
      "position": [
        672,
        64
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "file",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Config').item.json.repo_owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Config').item.json.repo_name }}"
        },
        "filePath": "={{ $('Config').item.json.repo_path }}/{{$('Loop Over Items').item.json.name}}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{$('Loop Over Items').item.json.name}} ({{$json.github_status}})"
      },
      "id": "a34ee36e-b9c3-44c1-b99a-8ae043365199",
      "name": "Create new file",
      "type": "n8n-nodes-base.github",
      "position": [
        1120,
        64
      ],
      "webhookId": "4b4eaa7f-ba1e-4743-a7b2-62c71bef1d0a",
      "typeVersion": 1,
      "credentials": {
        "githubOAuth2Api": {
          "id": "C4zUH1OwuLB35bp4",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "file",
        "operation": "edit",
        "owner": {
          "__rl": true,
          "value": "={{ $('When Executed by Another Workflow').item.json['Repository Owner'] }}",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "={{ $('When Executed by Another Workflow').item.json['Repository Name'] }}",
          "mode": "name"
        },
        "filePath": "={{ $('When Executed by Another Workflow').item.json['File Path'] }}",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{$('Loop Over Items').item.json.name}} ({{$json.github_status}})"
      },
      "id": "df1fc597-d6bb-40cb-aa31-7de9c9d8a6a7",
      "name": "Edit existing file",
      "type": "n8n-nodes-base.github",
      "position": [
        1120,
        -160
      ],
      "webhookId": "f143256d-2a69-4cd4-a9d1-fbd2257cf2c3",
      "typeVersion": 1,
      "credentials": {
        "githubOAuth2Api": {
          "id": "C4zUH1OwuLB35bp4",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "6655f56f-b447-43eb-84a2-be8b71524af7",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{$json.github_status}}",
                    "rightValue": "different"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "Different"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "fd0fcdea-e8c0-42be-ba51-5cd2b71ed247",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{$json.github_status}}",
                    "rightValue": "new"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "New"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "ca3b1c68-d756-4de5-b69b-147526e19e35",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{$json.github_status}}",
                    "rightValue": "same"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "Same"
            }
          ]
        },
        "options": {}
      },
      "id": "9b6293e4-9b83-4cc4-abf1-0e627c861f43",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "position": [
        896,
        64
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "={{ $json['Repository Owner'] }}",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "={{ $json['Repository Name'] }}",
          "mode": "name"
        },
        "filePath": "={{ $json['File Path'] }}",
        "asBinaryProperty": false,
        "additionalParameters": {}
      },
      "id": "3e33c09b-c73e-4700-8ccd-5957f86491dc",
      "name": "Get a file",
      "type": "n8n-nodes-base.github",
      "position": [
        -96,
        -16
      ],
      "webhookId": "f4d30d2c-4e6d-4abb-9d73-e03097a315f1",
      "typeVersion": 1.1,
      "alwaysOutputData": true,
      "credentials": {
        "githubOAuth2Api": {
          "id": "C4zUH1OwuLB35bp4",
          "name": "GitHub account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "628f6e8f-d817-4c53-89ec-b1acbb3dfef8",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              },
              "leftValue": "={{ $json.content }}",
              "rightValue": ""
            },
            {
              "id": "63fc68bb-63d0-40a8-92e4-2a62b5a71812",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              },
              "leftValue": "={{ $json.error }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "01f86056-eb1e-4998-8779-f2570dd5ad36",
      "name": "Is File too large?",
      "type": "n8n-nodes-base.if",
      "position": [
        48,
        -32
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "url": "={{ $json.download_url }}",
        "options": {}
      },
      "id": "ab1f5c83-26f8-4eab-acd6-20449bafbaf0",
      "name": "Get File",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        240,
        -96
      ],
      "typeVersion": 4.2
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-10-03T11:52:33.555Z",
      "updatedAt": "2025-10-03T11:52:33.555Z",
      "role": "workflow:owner",
      "workflowId": "uNo2nab5wWq5G2iH",
      "projectId": "aWyvbmsnIGDehq9r"
    }
  ],
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-10-01T05:17:03.484Z",
      "updatedAt": "2025-10-01T05:17:03.484Z",
      "id": "YfZi53gl026aEXFg",
      "name": "Github"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-10-03T11:56:52.000Z",
  "versionId": "ad4a87ce-752b-458e-9e72-49f11a5fcdaa"
}